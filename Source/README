Jeff Colgan, CSCI-4229 Final Project
Project Review submission, November 30, 2021.

User Controls:

   'F' key          -   Toggles the flashlight on and off.
   'W' key          -   Move forward.
   'S' key          -   Move backward.
   'A' key          -   Strafe left.
   'D' key          -   Strafe right.
   '~' key          -   Basic overhead view (to get your bearings)
    RIGHT ARROW key -   Turn the first-person camera to the right by 5 degrees.
    LEFT ARROW key  -   Turn the first-person cmaera to the left by five degrees.
    ESC key         -   Quit the application.

Instructions:
   To run the application, unzip the directory into whatever file location you desire, and
   navigate to the main project directory "FinalProject".  Open the terminal in this directory
   and type "make".  The user controls within the application are listed in the above
   section of this README.   

Sources (Code):

   The transformation matrices that I used in converting Camera eye coordinates from the world
   coordinate system to local object coordinate systems (used in the collision functions)
   were retrieved from my old coursework in my Intro to Robotics class from last semester.  The 
   inverse matrix that I used to convert back to world coordinates after the collision was resolved
   was computed by the Symbolab online calculator.  Additionally, I found some resources on
   StackExchange to help me understand texture blending (specifically to make the translucent
   glass texture on my lantern object).  I borrowed two lines of code from this thread
   Thread address: https://stackoverflow.com/questions/24399431/opengl-texture-with-transparency-alpha
   I also got the idea to tessalate the larger polygons in my objects to get the spotlight effect to
   look better from the following source: https://www.glprogramming.com/red/chapter05.html.
   Additionally, the CSCIx229 library is borrowed, and the format of the makefile is based on the 
   makefiles from previous assignments and in-class examples.
   Lastly, the code for generating trees was borrowed from the in-class notes about creating trees
   using fractals.  I made a few minor modifications for optimization so that I could have a larger
   quantity of trees rendering at one time, particularly reducing the number of leaves on each tree.
   My justification for doing so is that the user is exploring the forest in Autumn.  
     

Sources (Textures):
   All textures used in this project were sourced by me, using my phone camera except for the following textures.  
   The skybox texture was retrieved from: 
   https://pixabay.com/illustrations/stars-night-dark-sky-space-3750824/
   and the horizon texture was sourced from:
   https://pixabay.com/vectors/dark-darkness-meteor-night-2024127/
   I intended to source the skybox and horizon textures myself, however I do not own any professional photography
   equipment, and my phone was not able to get a decent quality picture of the night sky.
   The metal texture used for the Cabin doorhandle and hinges and as the base texture for the glass on the Lantern
   object was sourced from the following address:
   https://pixabay.com/illustrations/metal-background-steel-brushed-1212115/
   Similar to the night sky texture, I was unable to get a good picture of a "shiny" metal surface
   without negatively affecting the lighting (any light reflected off of the metal surface that was picked 
   up by my phone camera ruined the effect of the lighting in-application).
   Additional texture sources.
   Tree stump surface texture: https://pixabay.com/photos/wood-stump-tree-texture-wooden-6806631/.
   Hedge maze wall texture: https://pixabay.com/photos/bank-park-to-sit-park-bench-4237809/.

Estimated Time:
   So far I have spent around 80 hours on this project.  The breakdown is as follows:
   Time spent sourcing and editing texture images: around 2.5 hours.
   Time spent implementing the object geometry (render functions):  About 13 hours.
   Time spent implementing surface normals and testing lighting: about 22 hours.
   Time spent implementing and testing object collisions:  about 24 hours.
   Time spent placing objects and designing the environment:  about 10.5 hours. 
   Time spent testing the performance on my VM (to get a floor for performance) and making optimization passes: 8 hours.

Changelog since project review:
   * I fixed the issue with lighting on the ground changing on first input in the comments from the review.  I had been calling 
     the lightSource function in the Lantern object after rendering the other objects in the scene, so the lighting effect did 
     not appear on the ground or surrounding objects until the user pressed some input, or the window was resized.
   * I also fixed the issue with the light changing unexpectedly when turning the camera near the Lantern object when the flashlight
     was off.  The light source that is based in the lantern object was supposed to be a point light, but I had specified a direction
     vector for the light source in the lightSource method of Lantern class.  I removed the direction vector, and now the surfaces on
     the outside of the lantern are correctly dark when the flashlight is off (since the light source is inside the Lantern's glass casing,
     the external surfaces should be shadowed.
   * I fixed a minor graphical bug in the HedgeWall object.  It was invisible in the review build because it was under the surface of the ground, 
     but the side edges extended beyont the bottom of the object geometry.
   * I reduced the vertical size of HedgeWalls and TreeStumps and changed their y-translation to save on the number of triangles: both objects were currently
     drawing twice their visible size below the floor, and there is no reason to waste computational power drawing parts of shapes that the user will
     never see.
   * In lieu of a debug mode with an orbiting light source (I have another huge project due next week, and I need to begin work on that
     as soon as possible) I have added a simple overhead perspective projection view that will allow the user to get their bearings and see
     the whole map to get their bearings.  (If debug mode for lighting of each object is needed, just ask - I do have a separate tester
     program that I used to check the normals for each object as I made them).
   * I aggresively optimized everything that I could to try and squeeze as much fps out of the project as I could.  Every loop that could
     be unrolled got unrolled, and I added code to break the loop checking for Tree collisions if a collision was detected (since there are
     a lot of trees, and the way my environment is designed it is impossible to collide with multiple treeas at the same time).  I also added
     local variables wherever I could to reduce the number of computations needed for the render functions of each object.
   * I made a few tweaks to the thresholds for collisions in a few objects (the corner of the Camera was still clipping through a few objects.
   * Resized all of the textures, I don't know why but apparently my brain broke and I mistakenly thought that the texture size specified in the
     course expectations was 512 X 512 pixels and not 256 X 256.  I resized them all to the proper dimensions of 256 X 256 pixels.
   * I replaced the placeholder textures for the axe head, shovel head and shovel handle.
   * I made a few minor adjustments to the normals of the Tent walls, so the lighting looks more appropriate.
   * Fixed minor lighting bug with the Shovel handle where the lantern light source was incorrectly lighting the opposite side of the cylinder.
   * Fixed minor lighting bug with the Shovel handle where the lantern light source was incorrectly lighting the outside of the handle connectors.
   * Fixed major lighting bug with the Shovel head where the wrong side of the shovel head was being lit by the lantern.
   * Fixed graphical bug in the hedge maze that was causing some z-fighting around the outside edges.
   * Fixed minor lighting bug with the Axe head where the blade would not correctly light up when approached from certain angles with the flashlight.
   * Removed surfaces from the Axe and Shovel objects that were unnecessary (completely covered by the object geometry).
   * Fixed major lighting bug with the Lantern object where the inner base and top discs were not correctly illuminated by the light source (in the
     middle of the Lantern's glass casing).
   * Moved the axe object to make the campsite area a little less crowded.
   * Added new texture to Cabin object for door/window frames.

Additional notes:
   The hedge maze area was originally intended to be a cave area for the user to explore, however I had severe difficulty getting 
   the area to look decent, so with the limited time that I have left for the project, I decided to pivot to making this part of the
   map a basic hedge maze.  This is largely to demonstrate the collisions that I had already implemented for what were originally intended
   to be cave walls.  The HedgeWall class also add modular building blocks that can be rapidly added to the application as necessary for further
   design iterations (I have experience working in both Unity Engine and Unreal Engine, so this is where the idea of having modular building
   blocks comes from).
   IMPORTANT - although the lighting effects look wrong on the Lantern object, the bottom of the Lantern handle should be lit up, since the middle
               of the glass case is the origin of a light source.  Seeing as I have not implemented shadows in this project, this means that the light
               from inside the Lantern is passing through the top of the lantern to illuminate the bottom of the handle.  When I iterate on this project
               in the future (for my portfolio), implementing a shadowing algorithm like the ones discussed in last Thursday's lecture is at the top of 
               my to-do list.
   

The things to pay attention to/things I am proud of:
   * The collisions for Tent objects              - it took a lot of time and effort to get the collisions to work such that the user can't pass through 
                                                    the tent walls, but the tent doorway allows the user to pass through.
   * Tesselation of large polygons for lighting   - since I am using a spot light type of light source based at the Camera
                                                    eye position, I needed to tesselate the larger surfaces (hedge maze walls, cabin walls, 
                                                    ground surface, etc.) in order for the lighting effect to work right as the spotlight passes 
                                                    over them.  I am really proud of the algorithm that I developed to break the walls into smaller 
                                                    quads programatically.
   * The normals/geometry for Shovel/Tent objects - The complicated geometry of these objects was particularly difficult to get right, and I am proud 
                                                    of the work I did here.
   * The optimization work that I have done       - I took advantage of various optimization techniques that I remembered from Computer Systems to try and 
                                                    get a large number of trees and objects, as well as have a large scale environment without a massive hit 
                                                    to performance.  Even though I still had to cut the number of Trees from the original plan, I am proud of
                                                    the aggressive optimization that I did for this project.