Jeff Colgan, CSCI-4229 Final Project
Project Final submission, December 7, 2021.

User Controls:

   'F' key          -   Toggles the flashlight on and off.
   'W' key          -   Move forward.
   'S' key          -   Move backward.
   'A' key          -   Strafe left.
   'D' key          -   Strafe right.
   '~' key          -   Overhead perspective view (disables flashlight)
   'F1' key         -   Shortcut to place the user directly in front of the Cabin.
   'F2' key         -   Shortcut to place the user directly in front of the hedge maze.
    RIGHT ARROW key -   Turn the first-person camera to the right by 5 degrees.
    LEFT ARROW key  -   Turn the first-person camera to the left by 5 degrees.
    ESC key         -   Quit the application.

Instructions:
   To run the application, unzip the directory into whatever directory you desire.  Open the terminal in this directory
   and type "make".  The user controls within the application are listed in the above section of this README.

The things to pay attention to/things I am proud of:
   * The collisions for Tent objects              - It took a lot of time and effort to get the collisions to work such that the user can't pass through 
                                                    the tent walls, but the tent doorway allows the user to pass through.
   * Tesselation of large polygons for lighting   - Since I am using a spot light type of light source based at the Camera
                                                    eye position, I needed to tesselate the larger surfaces (hedge maze walls, cabin walls, 
                                                    ground surface, etc.) in order for the lighting effect to work right as the spotlight passes 
                                                    over them.  I am really proud of the algorithm that I developed to break larger quads into smaller 
                                                    quads programatically.
   * The normals/geometry for Shovel/Tent/Cabin   - The complicated geometry of these objects was particularly difficult to get right, and I am proud 
                                                    of the work I did here.
   * The optimization work that I have done       - I took advantage of various optimization techniques that I remembered from Computer Systems to try and 
                                                    get a large number of trees and objects, as well as have a large scale environment without a massive hit 
                                                    to performance.  Even though I still had to cut the number of Trees from the original plan, I am proud of
                                                    the aggressive optimization that I did for this project.  In particular, I am proud of the fact that I was able 
                                                    to get an average framerate of 66.14 fps on my test VM and an average framerate of 151.48 fps on my production computer.
                                                    I measured the framerate by adding a dummy idle function that only called glutPostRedisplay, and used the lines of
                                                    code from Gears.c to print the fps (removed from the final submission).  The reason I am proud of this work is that before 
                                                    I optimized the code, I was getting an average framerate of about 30 fps on my VM and about 56 fps on my production computer.
   * The collisions in general                    - I specifically mentioned the Tent object collisions (because of the object's complex geometry, but I also want to
                                                    make an additional entry for the collisions on the rest of the objects.  I spent a lot of time agonizing over the
                                                    collisions to make them work no matter the rotation of the objects, and tweaking the offsets to prevent the Camera
                                                    from clipping through at the corners of the screen.  Of particular note, I am proud of the hedge maze, which fully
                                                    demonstrates the collisions working regardless of object rotation.  I am proud of having a simple maze that is completely
                                                    navigateable, with no clipping or "invisible blockages".

Sources (Code):

   * The transformation matrices that I used in converting Camera eye coordinates from the world
     coordinate system to local object coordinate systems (used in the collision functions)
     were retrieved from my old coursework in my Intro to Robotics class from last semester.  
   * The inverse matrix that I used to convert back to world coordinates after the collision was resolved
     was computed by the Symbolab online calculator.  
   * I found some resources on StackExchange to help me understand texture blending (specifically to make 
     the translucent glass texture on my lantern object).  
   * I borrowed two lines of code from this thread: https://stackoverflow.com/questions/24399431/opengl-texture-with-transparency-alpha
   * I got the idea to tessalate the larger polygons in my objects to get the spotlight effect to look better from: 
     https://www.glprogramming.com/red/chapter05.html.
   * I used the CSCIx229 library, and the format of the makefile is based on the makefiles from previous assignments and in-class examples.
   * For the Lantern light source, I used the chart found at the following address to determine appropriate
     values for the constant, linear and quadriatic attenuation factors: https://learnopengl.com/Lighting/Light-casters.
   * The code for generating trees was borrowed from the in-class notes about creating trees using fractals.  I made only a few minor 
     modifications for optimization so that I could have a larger quantity of trees rendering at one time.  
     
Sources (Textures):

   All textures used in this project were sourced by me, using my phone camera except for the following textures.  
   The skybox texture was retrieved from: https://pixabay.com/illustrations/stars-night-dark-sky-space-3750824/
   The horizon texture was sourced from: https://pixabay.com/vectors/dark-darkness-meteor-night-2024127/
   The metal texture used for the Cabin doorhandle and hinges and as the base texture for the glass on the Lantern
   object was from: https://pixabay.com/illustrations/metal-background-steel-brushed-1212115/
   The tree stump surface texture: https://pixabay.com/photos/wood-stump-tree-texture-wooden-6806631/.
   HedgeWall texture: https://pixabay.com/photos/bank-park-to-sit-park-bench-4237809/.

Estimated Time:

   I spent about 84 hours on this project.  The breakdown is as follows:
   Time spent sourcing and editing texture images: around 2.5 hours.
   Time spent implementing the object geometry (render functions):  About 13 hours.
   Time spent implementing surface normals and testing lighting: about 22 hours.
   Time spent implementing and testing object collisions:  about 26 hours.
   Time spent placing objects and designing the environment:  about 10.5 hours. 
   Time spent testing the performance on my VM and making optimization passes: 10 hours.

Additional notes:

   The hedge maze area was originally intended to be a cave area for the user to explore, however I decided to pivot to making this part of the
   map a basic hedge maze.  This allows me to demonstrate the collisions that I had implemented for what were originally intended
   to be cave walls.  The HedgeWall class also adds modular building blocks that can be rapidly added to the application as necessary for further
   design iterations.
   Although the lighting effects look wrong on the Lantern object, the bottom of the Lantern handle should be lit up, since the middle
   of the glass case is the origin of a light source and I have not implemented shadows in this project.  When I iterate on this project
   in the future, implementing a shadowing algorithm like the ones discussed in last Thursday's lecture is at the top of my to-do list.

Changelog since project review:
   * I fixed the issue with lighting on the ground changing on first input in the comments from the review.  I had been calling 
     the lightSource function in the Lantern object after rendering the other objects in the scene, so the lighting effect did 
     not appear on the ground or surrounding objects until the user pressed some input, or the window was resized.
   * I also fixed the issue with the light changing unexpectedly when turning the camera near the Lantern object when the flashlight
     was off.  The light source that is based in the lantern object was supposed to be a point light, but I had specified a direction
     vector for the light source in the lightSource method of Lantern class.  I removed the direction vector, and now the surfaces on
     the outside of the lantern are correctly lit when the flashlight is off (based on the light source origin inside the Lantern's glass 
     casing.
   * I fixed a minor graphical bug in the HedgeWall object.  It was invisible in the review build because it was under the surface of the ground, 
     but the side edges extended beyond the bottom of the object geometry.
   * I reduced the vertical size of HedgeWalls and TreeStumps and changed their y-translation to save on the number of triangles: both objects were currently
     drawing twice their visible size below the floor, and there is no reason to waste computational power drawing parts of shapes that the user will
     never see.
   * In lieu of a debug mode with an orbiting light source I have added a simple overhead perspective projection view that will allow the user to get their 
     bearings and see the whole area to get their bearings.
   * I aggresively optimized everything that I could to try and squeeze as much fps out of the project as I could.  Every loop that could
     be unrolled got unrolled, and I added code to break the loop checking for Tree collisions if a collision was detected (since there are
     a lot of trees, and the way my environment is designed it is impossible to collide with multiple treeas at the same time).  I also added
     local variables wherever I could to reduce the number of computations needed for the render functions of each object.
   * I made a few tweaks to the thresholds for collisions in a few objects (the corner of the Camera was still clipping through a few objects and the user
     would get stuck in some areas of the hedge maze).
   * Resized all of the textures, I don't know why but apparently my brain broke and I mistakenly thought that the maximum texture size specified in the
     course expectations was 512 X 512 pixels and not 256 X 256.  I resized them all to the proper dimensions of 256 X 256 pixels.
   * I replaced the placeholder textures for the axe head, shovel head and shovel handle and door/window frames on the Cabin object.
   * I made a few minor adjustments to the normals of the Tent walls, so the lighting looks more appropriate.
   * Fixed minor lighting bug with the Shovel handle where the lantern light source was incorrectly lighting the opposite side of the cylinder.
   * Fixed minor lighting bug with the Shovel handle where the lantern light source was incorrectly lighting the outside of the handle connectors.
   * Fixed major lighting bug with the Shovel head where the wrong side of the shovel head was being lit by the lantern.
   * Fixed graphical bug in the hedge maze that was causing some z-fighting around the outside edges.
   * Fixed minor lighting bug with the Axe head where the blade would not correctly light up when approached from certain angles with the flashlight on.
   * Removed surfaces from the Axe and Shovel objects that were unnecessary (completely covered by the object geometry).
   * Fixed major lighting bug with the Lantern object where the inner base disc was not correctly illuminated by the light source (in the
     middle of the Lantern's glass casing).
   * Moved the axe object to make the campsite area a little less crowded.
   * Reduced the branch length to 1.7 in the Tree->Render() function to further optimize performance.
   * Added a bunch of comments for clarity where appropriate in the code.
   * Updated the collision functions for various objects to keep the collision detection/resolution syntax consistent.
   * Removed all tab-spaces inserted by IDE.