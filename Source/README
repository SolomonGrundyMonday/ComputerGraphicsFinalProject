Jeff Colgan, CSCI-4229 Final Project
Project Review submission, November 30, 2021.

User Controls:

   'F' key          -   Toggles the flashlight on and off.
   'W' key          -   Move forward.
   'S' key          -   Move backward.
   'A' key          -   Strafe left.
   'D' key          -   Strafe right.
    RIGHT ARROW key -   Turn the first-person camera to the right by 5 degrees.
    LEFT ARROW key  -   Turn the first-person cmaera to the left by five degrees.
    ESC key         -   Quit the application.

Instructions:
   To run the application, unzip the directory into whatever file location you desire, and
   navigate to the main project directory "FinalProject".  Open the terminal in this directory
   and type "make".  The user controls within the application are listed in the above
   section of this README.   

Sources (Code):

   The transformation matrices that I used in converting Camera eye coordinates from the world
   coordinate system to local object coordinate systems (used in the collision functions)
   were retrieved from my old coursework in my Intro to Robotics class from last semester.  The 
   inverse matrix that I used to convert back to world coordinates after the collision was resolved
   was computed by the Symbolab online calculator.  Additionally, I found some resources on
   StackExchange to help me understand texture blending (specifically to make the translucent
   glass texture on my lantern object).  I borrowed two lines of code from this thread
   Thread address: https://stackoverflow.com/questions/24399431/opengl-texture-with-transparency-alpha
   I also got the idea to tessalate the larger polygons in my objects to get the spotlight effect to
   look better from the following source: https://www.glprogramming.com/red/chapter05.html.
   Additionally, the CSCIx229 library is borrowed, and the format of the makefile is based on the 
   makefiles from previous assignments and in-class examples.
   Lastly, the code for generating trees was borrowed from the in-class notes about creating trees
   using fractals.  I made a few minor modifications for optimization so that I could have a larger
   quantity of trees rendering at one time, particularly reducing the number of leaves on each tree.
   My justification for doing so is that the user is exploring the forest in Autumn.  
     

Sources (Textures):
   All textures used in this project were sourced by me, using my phone camera except for the following textures.  
   The skybox texture was retrieved from: 
   https://pixabay.com/illustrations/stars-night-dark-sky-space-3750824/
   and the horizon texture was sourced from:
   https://pixabay.com/vectors/dark-darkness-meteor-night-2024127/
   I intended to source the skybox and horizon textures myself, however I do not own any professional photography
   equipment, and my phone was not able to get a decent quality picture of the night sky.
   The metal texture used for the Cabin doorhandle and hinges and as the base texture for the glass on the Lantern
   object was sourced from the following address:
   https://pixabay.com/illustrations/metal-background-steel-brushed-1212115/
   Similar to the night sky texture, I was unable to get a good picture of a "shiny" metal surface
   without negatively affecting the lighting (any light reflected off of the metal surface that was picked 
   up by my phone camera ruined the effect of the lighting in-application).
   Additional texture sources.
   Tree stump surface texture: https://pixabay.com/photos/wood-stump-tree-texture-wooden-6806631/.
   Hedge maze wall texture: https://pixabay.com/photos/bank-park-to-sit-park-bench-4237809/.

Estimated Time:
   So far I have spent around 64 hours on this project.  The breakdown is as follows:
   Time spent sourcing and editing texture images: around 2 hours.
   Time spent implementing the object geometry (render functions):  About 12 hours.
   Time spent implementing surface normals and testing lighting: about 16 hours.
   Time spent implementing and testing object collisions:  about 20 hours.
   Time spent placing objects and designing the environment:  about 10 hours. 
   Time spent testing the performance on my VM (to get a floor for performance) and making optimization passes: 4 hours.

Things that still need to be done:
   I would like to touch up the collisions for the Cabin and Tent objects.  My collisions for the Tent and cabin 
   objects are not as robust as I would like them to be (they only work if the objects are rotated at 0.0 or 180.0 degrees).  Additionally,
   I need to do a little work on the Tent surface normals, as they currently don't look quite right.  
   Lastly, I would like to replace some of the textures that I am using if time allows (specifically the textures for the axe head,
   shovel head, shovel handle and the axe handle/shovel shaft.  If necessary, I would also like to implement a debug mode that
   allows the user to examine each individual object with an orbiting light source to demonstrate that the normals are working, since
   in first-person mode, it isn't really possible to shine a light on certain surfaces given the limitations of character movement.  Last but
   not least, I will be making one additional optimization pass before the final submission.  Currently, I was running into severe framerate
   issues on the test VM that I have to get a performance floor, so I just reduced the number of trees in the environment significantly.  Once
   collisions and surface normals are up to speed, I will remove various inefficiencies present in this test build.

Additional notes:
   The hedge maze area was originally intended to be a cave area for the user to explore, however I had severe difficulty getting 
   the area to look decent, so with the limited time that I have left for the project, I decided to pivot to making this part of the
   map a basic hedge maze.  This is largely to demonstrate the collisions that I had already implemented for what were originally intended
   to be cave walls.  The hedge maze walls also add modular walls that can be rapidly added to the application as necessary for further
   design iterations.
   The things to pay attention to/things I am proud of for this project are as follows:
   The collisions for Tent objects - even though the collisions are not currently very robust, it took a lot of time and effort to get the
   collisions to work such that the user can't pass through the tent walls, but the tent doorway allows the user to pass through.
   Tesselation of large polygons for the lighting effects - since I am using a spot light type of light source based at the Camera
   eye position, I needed to tesselate the larger surfaces (hedge maze walls, cabin walls, ground surface, etc.) in order for the lighting effect
   to work right as the spotlight passes over them.  Even though I still need to do a little work on the Cabin object to get the normals right for
   the smaller components, I am really proud of the algorithm that I developed to break the walls into smaller quads programatically.
   The normals and geometry for the Shovel and Tent objects - The complicated geometry of these objects was particularly difficult to get right, and I am proud
   of the work I did here.
   Lastly, I am proud of the optimization work that I have done so far to try and get a large number of trees and objects, as well as have a large scale environment 
   without a massive hit to performance.